from Crypto.Util.number import inverse
from binascii import unhexlify

# ---------------- Submit to oracle ----------------
modulus = 2**2048
# 32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230656
base = 13489305024865487703110255658234329747698118206959778644688156332043783846078839120693894255527894489531905012244713117142764166452312133019772171674466933769775907460046497284522592167536594047800489828714315435570429416637425443402332599055774982796405757075108551322778712959943658831605397635195107786224617525627358659165255604556424206194207190437525742567525338826878962081515333896433312311548844614323540250054093970082337500580573165008440265840792908334486258260848163001490152587781983042546491301026074736907693887630347258892882871059741621049169714319440564952700454580681894452760215968494428411686329

# ---------------- Get from oracle ----------------
# My public output: 
public_key = 25670845173978519961209270631377887372845129261589065204853698009071281556777456482793955910450031504862576127835784128095393396479989043127483037613430871843540747534452896128528269137282102562126483086521432247793084305918844346241644232498552943167579844756601489905530466038473389245090731846696452655084040345188320128973471232525477034275096981059512285713574954167146779487432243860245159147912648823478931482453809932142565795083100634890249068425997070734144338560001380767729866736451518070144110584512516137912299553103295075305877227105286137497892528707287782338175621787532789498671772609880439797296385
# c:
ct = "db2303b8dbdbcbd4ee7c867c4d00962ee40d884f8b6cd09fbcf6c05453b886950df8a22e5a03b28c68b24ac8237c8ee5ba1e28a7e69413954a"

# ---------------- Pohligâ€“Hellman algorithm ----------------
e = 2045
xs = [0]
gamma = pow(base,2**(e-1),modulus)
invbase = inverse(base,modulus)
h = public_key
for k in range(e):
    hk = (pow(invbase,xs[k],modulus)*h)%modulus
    hk = pow(hk,2**(e-1-k),modulus)
    dk = 1 if hk==gamma else 0
    xs.append(xs[k]+(2**k)*dk)

secret = xs[-1]
print(f"Recovered Secret: {secret}")

# ---------------- Decrypt flag ----------------
ct = bytes.fromhex(ct)

from hashlib import shake_256
def encryptFlag(s):
    key = shake_256(str(s).encode()).digest(len(ct))
    return bytes([i ^ j for i, j in zip(key, ct)])

print(f"Recovered plaintext: {encryptFlag(secret)}")
