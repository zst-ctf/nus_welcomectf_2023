#!/usr/local/bin/python

from secrets import randbits
from hashlib import shake_256

FLAG = b'REDACTED'

def encryptFlag(s):
    key = shake_256(str(s).encode()).digest(len(FLAG))
    return bytes([i ^ j for i, j in zip(key, FLAG)])

print("Let's perform Diffie–Hellman Key exchange!")
p = int(input("Send me your modulus: "))
g = int(input("Send me your base: "))

secret = randbits(1024)
A = pow(g, secret, p)
print(f"My secret: {secret}")
print(f"My public output: {A}")
print(f"c: {encryptFlag(secret).hex()}")


from Crypto.Util.number import inverse
from binascii import unhexlify

modulus = p #2**2048
base = g

'''
DLP-1
modulus:
32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230656

base:
13489305024865487703110255658234329747698118206959778644688156332043783846078839120693894255527894489531905012244713117142764166452312133019772171674466933769775907460046497284522592167536594047800489828714315435570429416637425443402332599055774982796405757075108551322778712959943658831605397635195107786224617525627358659165255604556424206194207190437525742567525338826878962081515333896433312311548844614323540250054093970082337500580573165008440265840792908334486258260848163001490152587781983042546491301026074736907693887630347258892882871059741621049169714319440564952700454580681894452760215968494428411686329
'''

public_key = A
e = 2045

# Pohlig–Hellman algorithm
xs = [0]
gamma = pow(base,2**(e-1),modulus)
invbase = inverse(base,modulus)
h = public_key
for k in range(e):
    hk = (pow(invbase,xs[k],modulus)*h)%modulus
    hk = pow(hk,2**(e-1-k),modulus)
    dk = 1 if hk==gamma else 0
    xs.append(xs[k]+(2**k)*dk)

secret = xs[-1]
print("found secret", secret)
